*master*

* Reflection macros now test the options [emschwar]

    rails_context Room do
      asserts_topic.has_one :floor, :class_name => "Surface"
      asserts_topic.has_many :walls, :join_table => "foos"
    end

* Added the has_one reflection macro [emschwar]

    rails_context Room do
      asserts_topic.has_one :floor
    end

* Added the attribute_is_invalid validation macro [jaknowlden]

    rails_context Room do
      hookup { topic.location = nil }
      asserts_topic.attribute_is_invalid(:location, "can't be blank")
    end

* Added validates_length_of assertion macro (minimalistic) [jaknowlden]

    rails_context Room do
      asserts_topic.validates_length_of :name, (2..36)
    end

* Added transactional support to RailsContext. Disabled by default [jaknowlden]

    rails_context Room do
      set :transactional, true
    end

* Added option enabling to RailsContext [jaknowlden]

    rails_context Room do
      set :this, "that"
    end

* Added initial #rails_context. Assumes ActiveRecord class for now [jaknowlden]

    class Room < ActiveRecord::Base
      # ...
    end

    # TEST

    rails_context Room do
      asserts_topic.belongs_to(:house)
      asserts_topic.validates_presence_of(:house_id)
    end

* Added the #belongs_to ActiveRecord assertion macro [jaknowlden]

    context "a Room" do
      setup { Room.new }
      asserts_topic.belongs_to(:house)
    end
